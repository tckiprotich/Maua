import Head from "next/head";
import Image from "next/image";
import client from "../apolloclient";
import { gql } from "@apollo/client";
import Footer from "../components/Footer";

export default function Home({ Images }) {
  console.log(Images); //log image object arrays to the terminal
  return (
    <div>
      <Head>
        <title>Maua</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex items-center justify-center h-screen mb-0 bg-fixed bg-center bg-cover custom-img">
        <div className="h-screen absolute top-0 left-0 right-0 bottom-0 bg-black/40 z-[2]" />
        <div>
          <h1 className="text-5xl text-sky-400/100  font-bold text-center justify-center mt-7-30 ">
            Flowers bring color<br></br> to your world
          </h1>
          <p className="pt-20 text-2xl text-center w-500 mx-20">
            A flower’s appeal is in its contradictions — so delicate in form yet
            strong in fragrance, so small in size yet big in beauty, so short in
            life yet long on effect
          </p>
        </div>
       
        
       
      </div>
      <div>
      <div className=" mx-auto w-full max-w-md px-8 py-4 mt-16 bg-white rounded-lg shadow-lg dark:bg-gray-800">
        <div className="flex justify-center -mt-16 md:justify-end">
          
          <div className='object-cover w-20 h-20 border-2 border-blue-500 rounded-full dark:border-blue-400 custom-i'/>
        </div>

        <h2 className="mt-2 text-2xl font-semibold text-gray-800 dark:text-white md:mt-0 md:text-3xl">
          Why flowers
        </h2>

        <p className="mt-2 text-gray-600 dark:text-gray-200">
          
          Plain and simple, flowers are beautiful and give feelings of hope,
          love, vibrancy, life, the joy of spring and so much more. The range
          and contrast of colors in flowers lead to wonderful shots. When I
          decide to take a picture of a flower, I usually have to be in the
          right place at the right time. The flower has to be in bloom, and I
          have to be able to get close enough without trampling on it.
        </p>

        <div className="flex justify-end mt-4">
          <a
            href="#"
            className="text-xl font-medium text-blue-600 dark:text-blue-300"
            tabindex="0"
            role="link"
          >
            collins Tonui
          </a>
        </div>
      </div>
      <section className="bg-white dark:bg-gray-900 pt-30">
        <div className="container px-6 py-10 mx-auto">
          <h1 className="text-3xl font-semibold text-center text-gray-800 capitalize lg:text-4xl dark:text-white">
            Enjoy beatufiful pictures
          </h1>
          
            <div className="grid grid-cols-1 gap-8 mt-8 xl:mt-12 xl:gap-12 md:grid-cols-2 xl:grid-cols-3">
            {Images.images.map(({ id, name, description, img }) => (
              
              <div className="overflow-hidden bg-cover rounded-lg cursor-pointer h-96 group bg-gray-800/60 group-hover:opacity-100">
                <Image src={img.url} alt={name} objectfit="cover" layout="fill" width={500} height={700} />
                
                <div
                  key={id}
                  className="flex flex-col justify-center mx-auto px-8 py-4 transition-opacity duration-700 opacity-0 backdrop-blur-sm bg-gray-800/60 group-hover:opacity-100">
                
                  {/* <h2 className="mt-4 text-2xl font-semibold text-white capitalize">
                    {name}
                  </h2> */}
                  {/* <p className="mt-2 text-lg tracking-wider text-blue-400 uppercase ">
                    {description.text}
                  </p> */}
                </div>
              </div>
              ))}
            </div>
          
        </div>
      </section>
      <Footer/>
    </div>
    </div>
  );
}

//client side rendering function
export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      {
        images {
          id
          name
          description {
            text
          }
          img {
            url
          }
        }
      }
    `,
  });
  const Images = data;
  return {
    props: {
      Images,
    },
    revalidate: 1000,
  };
}
